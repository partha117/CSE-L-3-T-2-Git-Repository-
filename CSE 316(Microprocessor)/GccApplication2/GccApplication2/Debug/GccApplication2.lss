
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ace  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  00000ace  00000b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  008001a6  008001a6  00000ca8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dac  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000716  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a12  00000000  00000000  0000222e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00002c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040f  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064f  00000000  00000000  000030ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000373e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	65 04       	cpc	r6, r5
  56:	6b 04       	cpc	r6, r11
  58:	71 04       	cpc	r7, r1
  5a:	76 04       	cpc	r7, r6
  5c:	7c 04       	cpc	r7, r12
  5e:	83 04       	cpc	r8, r3
  60:	83 04       	cpc	r8, r3

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	11 e0       	ldi	r17, 0x01	; 1
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ee ec       	ldi	r30, 0xCE	; 206
  76:	fa e0       	ldi	r31, 0x0A	; 10
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a6 3a       	cpi	r26, 0xA6	; 166
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	a6 ea       	ldi	r26, 0xA6	; 166
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	ad 3c       	cpi	r26, 0xCD	; 205
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  98:	0c 94 65 05 	jmp	0xaca	; 0xaca <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <drawVLine>:
#define SET_ROW(X) PORTB = X; PORTD = X >> 8;
#define SET_COLUMN(C, COLOR) PORTA = C | COLOR;

//param: co-ordinate of top point
void drawVLine(uint16_t x, uint16_t y, unsigned char len, unsigned char color){
	uint16_t X = 1 << (15 - x);
  a0:	ef e0       	ldi	r30, 0x0F	; 15
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	e8 1b       	sub	r30, r24
  a6:	f9 0b       	sbc	r31, r25
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <drawVLine+0x12>
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	ea 95       	dec	r30
  b4:	e2 f7       	brpl	.-8      	; 0xae <drawVLine+0xe>
	
	while(len--){
  b6:	44 23       	and	r20, r20
  b8:	71 f0       	breq	.+28     	; 0xd6 <drawVLine+0x36>
		SET_ROW(X);
		SET_COLUMN(y, color);
  ba:	26 2b       	or	r18, r22
//param: co-ordinate of top point
void drawVLine(uint16_t x, uint16_t y, unsigned char len, unsigned char color){
	uint16_t X = 1 << (15 - x);
	
	while(len--){
		SET_ROW(X);
  bc:	88 bb       	out	0x18, r24	; 24
  be:	92 bb       	out	0x12, r25	; 18
		SET_COLUMN(y, color);
  c0:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	e9 ef       	ldi	r30, 0xF9	; 249
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <drawVLine+0x26>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <drawVLine+0x2c>
  cc:	00 00       	nop
		_delay_ms(1);
		X >>= 1;
  ce:	96 95       	lsr	r25
  d0:	87 95       	ror	r24
  d2:	41 50       	subi	r20, 0x01	; 1

//param: co-ordinate of top point
void drawVLine(uint16_t x, uint16_t y, unsigned char len, unsigned char color){
	uint16_t X = 1 << (15 - x);
	
	while(len--){
  d4:	99 f7       	brne	.-26     	; 0xbc <drawVLine+0x1c>
		SET_ROW(X);
		SET_COLUMN(y, color);
		_delay_ms(1);
		X >>= 1;
	}
	PORTA = 0xff;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	08 95       	ret

000000dc <drawHLine>:
	
}

//param: co-ordinate of top point
void drawHLine(uint16_t x, uint16_t y, unsigned char len, unsigned char color){
	uint16_t X = 1 << (15 - x);
  dc:	ef e0       	ldi	r30, 0x0F	; 15
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	df 01       	movw	r26, r30
  e2:	a8 1b       	sub	r26, r24
  e4:	b9 0b       	sbc	r27, r25
  e6:	e1 e0       	ldi	r30, 0x01	; 1
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <drawHLine+0x14>
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	aa 95       	dec	r26
  f2:	e2 f7       	brpl	.-8      	; 0xec <drawHLine+0x10>
	
	while(len--){
  f4:	44 23       	and	r20, r20
  f6:	79 f0       	breq	.+30     	; 0x116 <drawHLine+0x3a>
		SET_ROW(X);
  f8:	9f 2f       	mov	r25, r31
  fa:	e8 bb       	out	0x18, r30	; 24
  fc:	92 bb       	out	0x12, r25	; 18
		SET_COLUMN(y, color);
  fe:	86 2f       	mov	r24, r22
 100:	82 2b       	or	r24, r18
 102:	8b bb       	out	0x1b, r24	; 27
 104:	a9 ef       	ldi	r26, 0xF9	; 249
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	11 97       	sbiw	r26, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <drawHLine+0x2c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <drawHLine+0x32>
 10e:	00 00       	nop
 110:	6f 5f       	subi	r22, 0xFF	; 255
 112:	41 50       	subi	r20, 0x01	; 1

//param: co-ordinate of top point
void drawHLine(uint16_t x, uint16_t y, unsigned char len, unsigned char color){
	uint16_t X = 1 << (15 - x);
	
	while(len--){
 114:	91 f7       	brne	.-28     	; 0xfa <drawHLine+0x1e>
		SET_ROW(X);
		SET_COLUMN(y, color);
		_delay_ms(1);
		y++;
	}
	PORTA = 0xff;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	08 95       	ret

0000011c <drawDigit>:
}

void drawDigit(unsigned char dig, int col){
 11c:	20 e1       	ldi	r18, 0x10	; 16
 11e:	82 9f       	mul	r24, r18
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
 124:	fc 01       	movw	r30, r24
 126:	eb 59       	subi	r30, 0x9B	; 155
 128:	ff 4f       	sbci	r31, 0xFF	; 255
	unsigned char i;
	uint16_t x = 1 << 8;
	for (i = 0; i < 8; i ++){
 12a:	80 e0       	ldi	r24, 0x00	; 0
		SET_ROW(digit[dig][i]);
		x >>= 1;
		SET_COLUMN((col == 0 ? i : (i + 8)), GREEN);
		_delay_ms(1);
		PORTA = 0xff;
 12c:	2f ef       	ldi	r18, 0xFF	; 255

void drawDigit(unsigned char dig, int col){
	unsigned char i;
	uint16_t x = 1 << 8;
	for (i = 0; i < 8; i ++){
		SET_ROW(digit[dig][i]);
 12e:	90 81       	ld	r25, Z
 130:	98 bb       	out	0x18, r25	; 24
 132:	91 81       	ldd	r25, Z+1	; 0x01
 134:	32 96       	adiw	r30, 0x02	; 2
 136:	92 bb       	out	0x12, r25	; 18
		x >>= 1;
		SET_COLUMN((col == 0 ? i : (i + 8)), GREEN);
 138:	61 15       	cp	r22, r1
 13a:	71 05       	cpc	r23, r1
 13c:	19 f4       	brne	.+6      	; 0x144 <drawDigit+0x28>
 13e:	98 2f       	mov	r25, r24
 140:	90 66       	ori	r25, 0x60	; 96
 142:	03 c0       	rjmp	.+6      	; 0x14a <drawDigit+0x2e>
 144:	98 e0       	ldi	r25, 0x08	; 8
 146:	98 0f       	add	r25, r24
 148:	90 66       	ori	r25, 0x60	; 96
 14a:	9b bb       	out	0x1b, r25	; 27
 14c:	a9 ef       	ldi	r26, 0xF9	; 249
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	11 97       	sbiw	r26, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <drawDigit+0x34>
 154:	00 c0       	rjmp	.+0      	; 0x156 <drawDigit+0x3a>
 156:	00 00       	nop
		_delay_ms(1);
		PORTA = 0xff;
 158:	2b bb       	out	0x1b, r18	; 27
}

void drawDigit(unsigned char dig, int col){
	unsigned char i;
	uint16_t x = 1 << 8;
	for (i = 0; i < 8; i ++){
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	88 30       	cpi	r24, 0x08	; 8
 15e:	39 f7       	brne	.-50     	; 0x12e <drawDigit+0x12>
		SET_COLUMN((col == 0 ? i : (i + 8)), GREEN);
		_delay_ms(1);
		PORTA = 0xff;
	}
	
}
 160:	08 95       	ret

00000162 <draw>:

void draw(uint16_t mat[], unsigned char color){
 162:	fc 01       	movw	r30, r24
	unsigned char i;
	
	for (i = 0; i < 16; i++){	
 164:	90 e0       	ldi	r25, 0x00	; 0
		SET_ROW(mat[i]);
		SET_COLUMN(i, color);
		_delay_ms(1);
		PORTA = 0xff; //turn off all the leds.
 166:	2f ef       	ldi	r18, 0xFF	; 255

void draw(uint16_t mat[], unsigned char color){
	unsigned char i;
	
	for (i = 0; i < 16; i++){	
		SET_ROW(mat[i]);
 168:	80 81       	ld	r24, Z
 16a:	88 bb       	out	0x18, r24	; 24
 16c:	81 81       	ldd	r24, Z+1	; 0x01
 16e:	32 96       	adiw	r30, 0x02	; 2
 170:	82 bb       	out	0x12, r24	; 18
		SET_COLUMN(i, color);
 172:	86 2f       	mov	r24, r22
 174:	89 2b       	or	r24, r25
 176:	8b bb       	out	0x1b, r24	; 27
 178:	a9 ef       	ldi	r26, 0xF9	; 249
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	11 97       	sbiw	r26, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <draw+0x1a>
 180:	00 c0       	rjmp	.+0      	; 0x182 <draw+0x20>
 182:	00 00       	nop
		_delay_ms(1);
		PORTA = 0xff; //turn off all the leds.
 184:	2b bb       	out	0x1b, r18	; 27
}

void draw(uint16_t mat[], unsigned char color){
	unsigned char i;
	
	for (i = 0; i < 16; i++){	
 186:	9f 5f       	subi	r25, 0xFF	; 255
 188:	90 31       	cpi	r25, 0x10	; 16
 18a:	71 f7       	brne	.-36     	; 0x168 <draw+0x6>
		SET_COLUMN(i, color);
		_delay_ms(1);
		PORTA = 0xff; //turn off all the leds.
	}
	
}
 18c:	08 95       	ret

0000018e <calPoint>:
unsigned char flag[4];
unsigned char firstEntranceToMaze = 1;///new:
int life=0;
int point=0;
void calPoint(int x,int y)
{
 18e:	9c 01       	movw	r18, r24
	if(currentMaze==1)
 190:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <currentMaze>
 194:	91 30       	cpi	r25, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <calPoint+0xc>
 198:	44 c0       	rjmp	.+136    	; 0x222 <calPoint+0x94>
	{
		if(y>5&&x<8)
 19a:	66 30       	cpi	r22, 0x06	; 6
 19c:	71 05       	cpc	r23, r1
 19e:	84 f0       	brlt	.+32     	; 0x1c0 <calPoint+0x32>
 1a0:	28 30       	cpi	r18, 0x08	; 8
 1a2:	31 05       	cpc	r19, r1
 1a4:	e4 f4       	brge	.+56     	; 0x1de <calPoint+0x50>
		{
			point+=5;
 1a6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 1aa:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 1ae:	05 96       	adiw	r24, 0x05	; 5
 1b0:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 1b4:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		}
		if(y>10&&x<8)
 1b8:	6b 30       	cpi	r22, 0x0B	; 11
 1ba:	71 05       	cpc	r23, r1
 1bc:	3c f4       	brge	.+14     	; 0x1cc <calPoint+0x3e>
 1be:	0f c0       	rjmp	.+30     	; 0x1de <calPoint+0x50>
 1c0:	6b 30       	cpi	r22, 0x0B	; 11
 1c2:	71 05       	cpc	r23, r1
 1c4:	64 f0       	brlt	.+24     	; 0x1de <calPoint+0x50>
 1c6:	28 30       	cpi	r18, 0x08	; 8
 1c8:	31 05       	cpc	r19, r1
 1ca:	4c f4       	brge	.+18     	; 0x1de <calPoint+0x50>
		{
			point+=5;
 1cc:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 1d0:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 1d4:	05 96       	adiw	r24, 0x05	; 5
 1d6:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 1da:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		}
		if(x>8)
 1de:	29 30       	cpi	r18, 0x09	; 9
 1e0:	31 05       	cpc	r19, r1
 1e2:	0c f4       	brge	.+2      	; 0x1e6 <calPoint+0x58>
 1e4:	52 c0       	rjmp	.+164    	; 0x28a <calPoint+0xfc>
		{
			point+=5;
 1e6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 1ea:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 1ee:	05 96       	adiw	r24, 0x05	; 5
 1f0:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 1f4:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		}
		if(y>4&&x>8)
 1f8:	65 30       	cpi	r22, 0x05	; 5
 1fa:	71 05       	cpc	r23, r1
 1fc:	f4 f1       	brlt	.+124    	; 0x27a <calPoint+0xec>
		{
			point+=5;
 1fe:	05 96       	adiw	r24, 0x05	; 5
 200:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 204:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		}
		if(y>10&&x>8)
 208:	6b 30       	cpi	r22, 0x0B	; 11
 20a:	71 05       	cpc	r23, r1
 20c:	f4 f1       	brlt	.+124    	; 0x28a <calPoint+0xfc>
		{
			point+=5;
 20e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 212:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 216:	05 96       	adiw	r24, 0x05	; 5
 218:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 21c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
 220:	08 95       	ret
		}
	}
	else if(currentMaze==0)
 222:	91 11       	cpse	r25, r1
 224:	32 c0       	rjmp	.+100    	; 0x28a <calPoint+0xfc>
	{
		if(x>4)
 226:	25 30       	cpi	r18, 0x05	; 5
 228:	31 05       	cpc	r19, r1
 22a:	ec f0       	brlt	.+58     	; 0x266 <calPoint+0xd8>
		{
			point+=5;
 22c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 230:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 234:	05 96       	adiw	r24, 0x05	; 5
 236:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 23a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		}
		if(y>8&&x>4)
 23e:	69 30       	cpi	r22, 0x09	; 9
 240:	71 05       	cpc	r23, r1
 242:	fc f0       	brlt	.+62     	; 0x282 <calPoint+0xf4>
		{
			point+=5;
 244:	05 96       	adiw	r24, 0x05	; 5
 246:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 24a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		}
		if(y>10&&x>4)
 24e:	6b 30       	cpi	r22, 0x0B	; 11
 250:	71 05       	cpc	r23, r1
 252:	4c f0       	brlt	.+18     	; 0x266 <calPoint+0xd8>
		{
			point+=5;
 254:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 258:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 25c:	05 96       	adiw	r24, 0x05	; 5
 25e:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 262:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		}
		point+=25;
 266:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 26a:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 26e:	49 96       	adiw	r24, 0x19	; 25
 270:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 274:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		
	}
		
}
 278:	08 95       	ret
		}
		if(y>4&&x>8)
		{
			point+=5;
		}
		if(y>10&&x>8)
 27a:	6b 30       	cpi	r22, 0x0B	; 11
 27c:	71 05       	cpc	r23, r1
 27e:	3c f6       	brge	.-114    	; 0x20e <calPoint+0x80>
 280:	08 95       	ret
		}
		if(y>8&&x>4)
		{
			point+=5;
		}
		if(y>10&&x>4)
 282:	6b 30       	cpi	r22, 0x0B	; 11
 284:	71 05       	cpc	r23, r1
 286:	34 f7       	brge	.-52     	; 0x254 <calPoint+0xc6>
 288:	ee cf       	rjmp	.-36     	; 0x266 <calPoint+0xd8>
 28a:	08 95       	ret

0000028c <checkLife>:
		
	}
		
}
int checkLife(int x,int y)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
	int i;
	if(currentMaze==1)
 290:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <currentMaze>
 294:	21 30       	cpi	r18, 0x01	; 1
 296:	b9 f0       	breq	.+46     	; 0x2c6 <checkLife+0x3a>
		for(i=0;i<2;i++)
		{
		
		if((i!=2))
		{
			if((obst[i].y==y)&&((x>=obst[i].x)&&(x<obst[i].x+obst[i].len)))
 298:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <obst+0x1>
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	26 17       	cp	r18, r22
 2a0:	37 07       	cpc	r19, r23
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <checkLife+0x1a>
 2a4:	73 c0       	rjmp	.+230    	; 0x38c <checkLife+0x100>
 2a6:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <obst>
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	82 17       	cp	r24, r18
 2ae:	93 07       	cpc	r25, r19
 2b0:	0c f4       	brge	.+2      	; 0x2b4 <checkLife+0x28>
 2b2:	6c c0       	rjmp	.+216    	; 0x38c <checkLife+0x100>
 2b4:	40 91 b1 01 	lds	r20, 0x01B1	; 0x8001b1 <obst+0x2>
 2b8:	24 0f       	add	r18, r20
 2ba:	31 1d       	adc	r19, r1
 2bc:	82 17       	cp	r24, r18
 2be:	93 07       	cpc	r25, r19
 2c0:	0c f0       	brlt	.+2      	; 0x2c4 <checkLife+0x38>
 2c2:	64 c0       	rjmp	.+200    	; 0x38c <checkLife+0x100>
 2c4:	45 c0       	rjmp	.+138    	; 0x350 <checkLife+0xc4>
 2c6:	ef ea       	ldi	r30, 0xAF	; 175
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
		
}
int checkLife(int x,int y)
{
	int i;
	if(currentMaze==1)
 2ca:	a1 e0       	ldi	r26, 0x01	; 1
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	40 e0       	ldi	r20, 0x00	; 0
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <checkLife+0x50>
 2d4:	4f 5f       	subi	r20, 0xFF	; 255
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	11 96       	adiw	r26, 0x01	; 1
 2da:	33 96       	adiw	r30, 0x03	; 3
	{
	for(i=0;i<10;i++)
	{
		
		if((i!=2)&&(i!=9))
 2dc:	42 30       	cpi	r20, 0x02	; 2
 2de:	51 05       	cpc	r21, r1
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <checkLife+0x58>
 2e2:	4d c0       	rjmp	.+154    	; 0x37e <checkLife+0xf2>
 2e4:	49 30       	cpi	r20, 0x09	; 9
 2e6:	51 05       	cpc	r21, r1
 2e8:	09 f4       	brne	.+2      	; 0x2ec <checkLife+0x60>
 2ea:	41 c0       	rjmp	.+130    	; 0x36e <checkLife+0xe2>
		{
			if((obst[i].y==y)&&((x>=obst[i].x)&&(x<obst[i].x+obst[i].len)))
 2ec:	21 81       	ldd	r18, Z+1	; 0x01
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	62 17       	cp	r22, r18
 2f2:	73 07       	cpc	r23, r19
 2f4:	b9 f4       	brne	.+46     	; 0x324 <checkLife+0x98>
 2f6:	20 81       	ld	r18, Z
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	82 17       	cp	r24, r18
 2fc:	93 07       	cpc	r25, r19
 2fe:	94 f0       	brlt	.+36     	; 0x324 <checkLife+0x98>
 300:	c2 81       	ldd	r28, Z+2	; 0x02
 302:	2c 0f       	add	r18, r28
 304:	31 1d       	adc	r19, r1
 306:	82 17       	cp	r24, r18
 308:	93 07       	cpc	r25, r19
 30a:	64 f4       	brge	.+24     	; 0x324 <checkLife+0x98>
 30c:	24 c0       	rjmp	.+72     	; 0x356 <checkLife+0xca>
				return 0;
			}
		}
		else
		{
			if((obst[i].x==x)&&((y>=obst[i].y)&&(y<obst[i].y+obst[i].len)))
 30e:	21 81       	ldd	r18, Z+1	; 0x01
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	62 17       	cp	r22, r18
 314:	73 07       	cpc	r23, r19
 316:	34 f0       	brlt	.+12     	; 0x324 <checkLife+0x98>
 318:	c2 81       	ldd	r28, Z+2	; 0x02
 31a:	2c 0f       	add	r18, r28
 31c:	31 1d       	adc	r19, r1
 31e:	62 17       	cp	r22, r18
 320:	73 07       	cpc	r23, r19
 322:	e4 f0       	brlt	.+56     	; 0x35c <checkLife+0xd0>
int checkLife(int x,int y)
{
	int i;
	if(currentMaze==1)
	{
	for(i=0;i<10;i++)
 324:	aa 30       	cpi	r26, 0x0A	; 10
 326:	b1 05       	cpc	r27, r1
 328:	ac f2       	brlt	.-86     	; 0x2d4 <checkLife+0x48>
		}
		
	   
		}	
	}
	return 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	36 c0       	rjmp	.+108    	; 0x39c <checkLife+0x110>
		for(i=0;i<2;i++)
		{
		
		if((i!=2))
		{
			if((obst[i].y==y)&&((x>=obst[i].x)&&(x<obst[i].x+obst[i].len)))
 330:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <obst+0x3>
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	82 17       	cp	r24, r18
 338:	93 07       	cpc	r25, r19
 33a:	9c f0       	brlt	.+38     	; 0x362 <checkLife+0xd6>
 33c:	40 91 b4 01 	lds	r20, 0x01B4	; 0x8001b4 <obst+0x5>
 340:	24 0f       	add	r18, r20
 342:	31 1d       	adc	r19, r1
 344:	82 17       	cp	r24, r18
 346:	93 07       	cpc	r25, r19
 348:	7c f0       	brlt	.+30     	; 0x368 <checkLife+0xdc>
		}
		
	   
		}	
	}
	return 1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	26 c0       	rjmp	.+76     	; 0x39c <checkLife+0x110>
		if((i!=2))
		{
			if((obst[i].y==y)&&((x>=obst[i].x)&&(x<obst[i].x+obst[i].len)))
			{
				
				return 0;
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	23 c0       	rjmp	.+70     	; 0x39c <checkLife+0x110>
		if((i!=2)&&(i!=9))
		{
			if((obst[i].y==y)&&((x>=obst[i].x)&&(x<obst[i].x+obst[i].len)))
			{
				
				return 0;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	20 c0       	rjmp	.+64     	; 0x39c <checkLife+0x110>
		}
		else
		{
			if((obst[i].x==x)&&((y>=obst[i].y)&&(y<obst[i].y+obst[i].len)))
			{
				return 0;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	1d c0       	rjmp	.+58     	; 0x39c <checkLife+0x110>
		}
		
	   
		}	
	}
	return 1;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	1a c0       	rjmp	.+52     	; 0x39c <checkLife+0x110>
		if((i!=2))
		{
			if((obst[i].y==y)&&((x>=obst[i].x)&&(x<obst[i].x+obst[i].len)))
			{
				
				return 0;
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	17 c0       	rjmp	.+46     	; 0x39c <checkLife+0x110>
				return 0;
			}
		}
		else
		{
			if((obst[i].x==x)&&((y>=obst[i].y)&&(y<obst[i].y+obst[i].len)))
 36e:	20 81       	ld	r18, Z
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	82 17       	cp	r24, r18
 374:	93 07       	cpc	r25, r19
 376:	59 f2       	breq	.-106    	; 0x30e <checkLife+0x82>
		}
		
	   
		}	
	}
	return 1;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0f c0       	rjmp	.+30     	; 0x39c <checkLife+0x110>
				return 0;
			}
		}
		else
		{
			if((obst[i].x==x)&&((y>=obst[i].y)&&(y<obst[i].y+obst[i].len)))
 37e:	20 81       	ld	r18, Z
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	82 17       	cp	r24, r18
 384:	93 07       	cpc	r25, r19
 386:	09 f0       	breq	.+2      	; 0x38a <checkLife+0xfe>
 388:	a5 cf       	rjmp	.-182    	; 0x2d4 <checkLife+0x48>
 38a:	c1 cf       	rjmp	.-126    	; 0x30e <checkLife+0x82>
		for(i=0;i<2;i++)
		{
		
		if((i!=2))
		{
			if((obst[i].y==y)&&((x>=obst[i].x)&&(x<obst[i].x+obst[i].len)))
 38c:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <obst+0x4>
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	62 17       	cp	r22, r18
 394:	73 07       	cpc	r23, r19
 396:	61 f2       	breq	.-104    	; 0x330 <checkLife+0xa4>
		}
		
	   
		}	
	}
	return 1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <checkCollision>:
int checkCollision(int x,int y)
{
	uint16_t temp=check[currentMaze][x];
 3a2:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <currentMaze>
 3a6:	fc 01       	movw	r30, r24
 3a8:	30 e1       	ldi	r19, 0x10	; 16
 3aa:	23 9f       	mul	r18, r19
 3ac:	e0 0d       	add	r30, r0
 3ae:	f1 1d       	adc	r31, r1
 3b0:	11 24       	eor	r1, r1
 3b2:	ee 0f       	add	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	eb 5d       	subi	r30, 0xDB	; 219
 3b8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ba:	20 81       	ld	r18, Z
 3bc:	31 81       	ldd	r19, Z+1	; 0x01
	//printf("temp %d\n",temp);
	if((x<16)&&(y<16)&&(x>=0)&&(y>=0))
 3be:	40 97       	sbiw	r24, 0x10	; 16
 3c0:	b0 f4       	brcc	.+44     	; 0x3ee <checkCollision+0x4c>
 3c2:	60 31       	cpi	r22, 0x10	; 16
 3c4:	71 05       	cpc	r23, r1
 3c6:	b0 f4       	brcc	.+44     	; 0x3f4 <checkCollision+0x52>
	{
		temp=(temp&(1<<(15-y)));
		if(temp==0)
		{
			return 1;
 3c8:	4f e0       	ldi	r20, 0x0F	; 15
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	46 1b       	sub	r20, r22
 3ce:	57 0b       	sbc	r21, r23
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <checkCollision+0x38>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	4a 95       	dec	r20
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <checkCollision+0x34>
 3de:	28 23       	and	r18, r24
 3e0:	39 23       	and	r19, r25
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	23 2b       	or	r18, r19
 3e8:	39 f0       	breq	.+14     	; 0x3f8 <checkCollision+0x56>
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret
		}
	}
	//printf("from maze %d\n",maze[x]);
	return 0;
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	08 95       	ret
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
}
 3f8:	08 95       	ret

000003fa <main>:
int main(void)
{
	uint16_t c = 0;
	unsigned char pinc = 0, t;
	DDRA = 0xFF;
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 3fe:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x00;
 400:	14 ba       	out	0x14, r1	; 20
	DDRD = 0xFF;
 402:	81 bb       	out	0x11, r24	; 17
	MCUCSR= 1 << JTD;MCUCSR= 1 << JTD;
 404:	80 e8       	ldi	r24, 0x80	; 128
 406:	84 bf       	out	0x34, r24	; 52
 408:	84 bf       	out	0x34, r24	; 52
	int loop=0;
	c=0;
	unsigned char firstEntranceToMaze0=1;
 40a:	44 24       	eor	r4, r4
 40c:	43 94       	inc	r4
	DDRA = 0xFF;
	DDRB = 0xFF;
	DDRC = 0x00;
	DDRD = 0xFF;
	MCUCSR= 1 << JTD;MCUCSR= 1 << JTD;
	int loop=0;
 40e:	c1 2c       	mov	r12, r1
 410:	d1 2c       	mov	r13, r1
	c=0;
 412:	00 e0       	ldi	r16, 0x00	; 0
 414:	10 e0       	ldi	r17, 0x00	; 0
	
    while(1){
		 c++;
		 if(lives==0)
		 {
			 currentScreen=GAME_OVER;
 416:	0f 2e       	mov	r0, r31
 418:	fa e0       	ldi	r31, 0x0A	; 10
 41a:	9f 2e       	mov	r9, r31
 41c:	f0 2d       	mov	r31, r0
		if(((dotR==14)||(dotR==13))&&(dotC==0)&&(currentMaze==0))
		{
			currentScreen=GAME_OVER;
		}
		if(currentScreen == MAZE){
			if(loop%20==0)
 41e:	0f 2e       	mov	r0, r31
 420:	f4 e1       	ldi	r31, 0x14	; 20
 422:	2f 2e       	mov	r2, r31
 424:	31 2c       	mov	r3, r1
 426:	f0 2d       	mov	r31, r0
			drawHLine(0, 6, lives, GREEN);
			drawHLine(0, 6, lives, RED);
			
			//if(life%10==0)
			//{
				if((c%100==0)&&!checkLife(dotR,dotC))
 428:	0f 2e       	mov	r0, r31
 42a:	f4 e6       	ldi	r31, 0x64	; 100
 42c:	7f 2e       	mov	r7, r31
 42e:	f0 2d       	mov	r31, r0

						break;
					
					default: c = 0;
				}
				drawVLine( obst[0].x,  obst[0].y,  obst[0].len,  RED);
 430:	cf ea       	ldi	r28, 0xAF	; 175
 432:	d1 e0       	ldi	r29, 0x01	; 1
			else if(currentMaze==0)
			{
					if(firstEntranceToMaze0){
					
					firstEntranceToMaze0 = 0;
					obst[0].len =  obst[1].len = 4;
 434:	68 94       	set
 436:	88 24       	eor	r8, r8
 438:	82 f8       	bld	r8, 2
					obst[2].len =  5;
 43a:	0f 2e       	mov	r0, r31
 43c:	f5 e0       	ldi	r31, 0x05	; 5
 43e:	5f 2e       	mov	r5, r31
 440:	f0 2d       	mov	r31, r0
				flag[0]=1;
				loop=0;
			}
			if(!( t & ((1 << PC0)) )){
				
				flag[0]=0;
 442:	0f 2e       	mov	r0, r31
 444:	fb ea       	ldi	r31, 0xAB	; 171
 446:	af 2e       	mov	r10, r31
 448:	f1 e0       	ldi	r31, 0x01	; 1
 44a:	bf 2e       	mov	r11, r31
 44c:	f0 2d       	mov	r31, r0
	c=0;
	unsigned char firstEntranceToMaze0=1;
	
	
    while(1){
		 c++;
 44e:	0f 5f       	subi	r16, 0xFF	; 255
 450:	1f 4f       	sbci	r17, 0xFF	; 255
		 if(lives==0)
 452:	e0 90 61 00 	lds	r14, 0x0061	; 0x800061 <lives>
 456:	e1 10       	cpse	r14, r1
 458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		 {
			 currentScreen=GAME_OVER;
 45a:	90 92 aa 01 	sts	0x01AA, r9	; 0x8001aa <currentScreen>
		 }
		 if(((dotR==14)||(dotR==13))&&(dotC==0)&&(currentMaze==1))
 45e:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <dotR>
 462:	83 ef       	ldi	r24, 0xF3	; 243
 464:	8f 0d       	add	r24, r15
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	08 f0       	brcs	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	b8 c2       	rjmp	.+1392   	; 0x9dc <__stack+0x17d>
 46c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dotC>
 470:	81 11       	cpse	r24, r1
 472:	0f c0       	rjmp	.+30     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 474:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentMaze>
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	09 f0       	breq	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	df c2       	rjmp	.+1470   	; 0xa3c <__stack+0x1dd>
		{
			currentMaze=0;
 47e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <currentMaze>
			dotR=1;
 482:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <dotR>
			dotC=0;
 486:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <dotC>
 48a:	a8 c2       	rjmp	.+1360   	; 0x9dc <__stack+0x17d>
		}
		if(((dotR==14)||(dotR==13))&&(dotC==0)&&(currentMaze==0))
		{
			currentScreen=GAME_OVER;
 48c:	90 92 aa 01 	sts	0x01AA, r9	; 0x8001aa <currentScreen>
 490:	5f c2       	rjmp	.+1214   	; 0x950 <__stack+0xf1>
		}
		if(currentScreen == MAZE){
 492:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <currentScreen>
 496:	81 11       	cpse	r24, r1
 498:	58 c2       	rjmp	.+1200   	; 0x94a <__stack+0xeb>
			if(loop%20==0)
 49a:	c6 01       	movw	r24, r12
 49c:	b1 01       	movw	r22, r2
 49e:	0e 94 28 05 	call	0xa50	; 0xa50 <__divmodhi4>
 4a2:	89 2b       	or	r24, r25
 4a4:	09 f0       	breq	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a6:	9c c0       	rjmp	.+312    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
			{
			
			//checks whether position changed.
			t = PINC;
 4a8:	63 b2       	in	r6, 0x13	; 19
			if(( t & (1 << PC0) )&&(!flag[0])){
 4aa:	60 fe       	sbrs	r6, 0
 4ac:	9a c2       	rjmp	.+1332   	; 0x9e2 <__stack+0x183>
 4ae:	f5 01       	movw	r30, r10
 4b0:	80 81       	ld	r24, Z
 4b2:	81 11       	cpse	r24, r1
 4b4:	1d c0       	rjmp	.+58     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				
				if(checkCollision(dotR+1,dotC))
 4b6:	c0 90 62 00 	lds	r12, 0x0062	; 0x800062 <dotC>
 4ba:	d1 2c       	mov	r13, r1
 4bc:	8f 2d       	mov	r24, r15
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	b6 01       	movw	r22, r12
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <checkCollision>
 4c8:	89 2b       	or	r24, r25
 4ca:	69 f0       	breq	.+26     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
				{
					dotR++;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	8f 0d       	add	r24, r15
 4d0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <dotR>
					if(!checkLife(dotR,dotC))
 4d4:	b6 01       	movw	r22, r12
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 46 01 	call	0x28c	; 0x28c <checkLife>
 4dc:	89 2b       	or	r24, r25
 4de:	19 f4       	brne	.+6      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
					{
						lives--;
 4e0:	ea 94       	dec	r14
 4e2:	e0 92 61 00 	sts	0x0061, r14	; 0x800061 <lives>
					
				}
				
				
				//_delay_ms(150);
				flag[0]=1;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	f5 01       	movw	r30, r10
 4ea:	80 83       	st	Z, r24
				loop=0;
 4ec:	c1 2c       	mov	r12, r1
 4ee:	d1 2c       	mov	r13, r1
			if(!( t & ((1 << PC0)) )){
				
				flag[0]=0;
			}
			
			if(( t & (1 << PC1) )&&(!flag[1]))
 4f0:	61 fe       	sbrs	r6, 1
 4f2:	7a c2       	rjmp	.+1268   	; 0x9e8 <__stack+0x189>
 4f4:	f5 01       	movw	r30, r10
 4f6:	81 81       	ldd	r24, Z+1	; 0x01
 4f8:	81 11       	cpse	r24, r1
 4fa:	21 c0       	rjmp	.+66     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
			{
			
				if(checkCollision(dotR-1,dotC))
 4fc:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <dotC>
 500:	f1 2c       	mov	r15, r1
 502:	d0 90 63 00 	lds	r13, 0x0063	; 0x800063 <dotR>
 506:	8d 2d       	mov	r24, r13
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	b7 01       	movw	r22, r14
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <checkCollision>
 512:	89 2b       	or	r24, r25
 514:	79 f0       	breq	.+30     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
				{
					dotR--;
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	8d 0d       	add	r24, r13
 51a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <dotR>
					if(!checkLife(dotR,dotC))
 51e:	b7 01       	movw	r22, r14
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 46 01 	call	0x28c	; 0x28c <checkLife>
 526:	89 2b       	or	r24, r25
 528:	29 f4       	brne	.+10     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
					{
						lives--;
 52a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lives>
 52e:	81 50       	subi	r24, 0x01	; 1
 530:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lives>
					}
				}
				flag[1]=1;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	f5 01       	movw	r30, r10
 538:	81 83       	std	Z+1, r24	; 0x01
				//_delay_ms(150);
				loop=0;
 53a:	c1 2c       	mov	r12, r1
 53c:	d1 2c       	mov	r13, r1
			}
			if(!( t & ((1 << PC1)) )){
				
				flag[1]=0;
			}
			if(( t & (1 << PC6) )&&(!flag[2])){
 53e:	66 fe       	sbrs	r6, 6
 540:	56 c2       	rjmp	.+1196   	; 0x9ee <__stack+0x18f>
 542:	f5 01       	movw	r30, r10
 544:	82 81       	ldd	r24, Z+2	; 0x02
 546:	81 11       	cpse	r24, r1
 548:	22 c0       	rjmp	.+68     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
			
				if(checkCollision(dotR,dotC+1))
 54a:	d0 90 62 00 	lds	r13, 0x0062	; 0x800062 <dotC>
 54e:	e0 90 63 00 	lds	r14, 0x0063	; 0x800063 <dotR>
 552:	f1 2c       	mov	r15, r1
 554:	6d 2d       	mov	r22, r13
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	6f 5f       	subi	r22, 0xFF	; 255
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	c7 01       	movw	r24, r14
 55e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <checkCollision>
 562:	89 2b       	or	r24, r25
 564:	79 f0       	breq	.+30     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
				{
					dotC++;
 566:	d3 94       	inc	r13
 568:	d0 92 62 00 	sts	0x0062, r13	; 0x800062 <dotC>
					if(!checkLife(dotR,dotC))
 56c:	6d 2d       	mov	r22, r13
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	c7 01       	movw	r24, r14
 572:	0e 94 46 01 	call	0x28c	; 0x28c <checkLife>
 576:	89 2b       	or	r24, r25
 578:	29 f4       	brne	.+10     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
					{
						lives--;
 57a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lives>
 57e:	81 50       	subi	r24, 0x01	; 1
 580:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lives>
					}
				}
				flag[2]=1;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	f5 01       	movw	r30, r10
 588:	82 83       	std	Z+2, r24	; 0x02
				//_delay_ms(150);
				loop=0;
 58a:	c1 2c       	mov	r12, r1
 58c:	d1 2c       	mov	r13, r1
			}
			if(!( t & ((1 << PC6)) )){
				
				flag[2]=0;
			}
			if(( t & (1 << PC7) )&&(!flag[3])){
 58e:	66 20       	and	r6, r6
 590:	0c f0       	brlt	.+2      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 592:	30 c2       	rjmp	.+1120   	; 0x9f4 <__stack+0x195>
 594:	f5 01       	movw	r30, r10
 596:	83 81       	ldd	r24, Z+3	; 0x03
 598:	81 11       	cpse	r24, r1
 59a:	22 c0       	rjmp	.+68     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
			
				if(checkCollision(dotR,dotC-1))
 59c:	d0 90 62 00 	lds	r13, 0x0062	; 0x800062 <dotC>
 5a0:	e0 90 63 00 	lds	r14, 0x0063	; 0x800063 <dotR>
 5a4:	f1 2c       	mov	r15, r1
 5a6:	6d 2d       	mov	r22, r13
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	61 50       	subi	r22, 0x01	; 1
 5ac:	71 09       	sbc	r23, r1
 5ae:	c7 01       	movw	r24, r14
 5b0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <checkCollision>
 5b4:	89 2b       	or	r24, r25
 5b6:	79 f0       	breq	.+30     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
				{
					dotC--;if(!checkLife(dotR,dotC))
 5b8:	da 94       	dec	r13
 5ba:	d0 92 62 00 	sts	0x0062, r13	; 0x800062 <dotC>
 5be:	6d 2d       	mov	r22, r13
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	c7 01       	movw	r24, r14
 5c4:	0e 94 46 01 	call	0x28c	; 0x28c <checkLife>
 5c8:	89 2b       	or	r24, r25
 5ca:	29 f4       	brne	.+10     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
					{
						lives--;
 5cc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lives>
 5d0:	81 50       	subi	r24, 0x01	; 1
 5d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lives>
					}
				}
				flag[3]=1;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	f5 01       	movw	r30, r10
 5da:	83 83       	std	Z+3, r24	; 0x03
				//_delay_ms(150);
				loop=0;
 5dc:	c1 2c       	mov	r12, r1
 5de:	d1 2c       	mov	r13, r1
				
				flag[3]=0;
			}
			
			}
			loop++;
 5e0:	ff ef       	ldi	r31, 0xFF	; 255
 5e2:	cf 1a       	sub	r12, r31
 5e4:	df 0a       	sbc	r13, r31
			pinc = t;
			
			
			draw(maze[currentMaze], RED);	
 5e6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentMaze>
 5ea:	20 e2       	ldi	r18, 0x20	; 32
 5ec:	82 9f       	mul	r24, r18
 5ee:	c0 01       	movw	r24, r0
 5f0:	11 24       	eor	r1, r1
 5f2:	60 e5       	ldi	r22, 0x50	; 80
 5f4:	8b 59       	subi	r24, 0x9B	; 155
 5f6:	9e 4f       	sbci	r25, 0xFE	; 254
 5f8:	0e 94 b1 00 	call	0x162	; 0x162 <draw>
			
			drawVLine(dotR, dotC, 1, GREEN); // the dot
 5fc:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <dotC>
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <dotR>
 606:	20 e6       	ldi	r18, 0x60	; 96
 608:	41 e0       	ldi	r20, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
			drawHLine(0, 6, lives, GREEN);
 610:	20 e6       	ldi	r18, 0x60	; 96
 612:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <lives>
 616:	66 e0       	ldi	r22, 0x06	; 6
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 6e 00 	call	0xdc	; 0xdc <drawHLine>
			drawHLine(0, 6, lives, RED);
 622:	20 e5       	ldi	r18, 0x50	; 80
 624:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <lives>
 628:	66 e0       	ldi	r22, 0x06	; 6
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 6e 00 	call	0xdc	; 0xdc <drawHLine>
			
			//if(life%10==0)
			//{
				if((c%100==0)&&!checkLife(dotR,dotC))
 634:	98 01       	movw	r18, r16
 636:	36 95       	lsr	r19
 638:	27 95       	ror	r18
 63a:	36 95       	lsr	r19
 63c:	27 95       	ror	r18
 63e:	ab e7       	ldi	r26, 0x7B	; 123
 640:	b4 e1       	ldi	r27, 0x14	; 20
 642:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
 646:	7c 01       	movw	r14, r24
 648:	f6 94       	lsr	r15
 64a:	e7 94       	ror	r14
 64c:	7e 9c       	mul	r7, r14
 64e:	c0 01       	movw	r24, r0
 650:	7f 9c       	mul	r7, r15
 652:	90 0d       	add	r25, r0
 654:	11 24       	eor	r1, r1
 656:	78 01       	movw	r14, r16
 658:	e8 1a       	sub	r14, r24
 65a:	f9 0a       	sbc	r15, r25
 65c:	99 f4       	brne	.+38     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 65e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <dotC>
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <dotR>
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 46 01 	call	0x28c	; 0x28c <checkLife>
 66e:	89 2b       	or	r24, r25
 670:	49 f4       	brne	.+18     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
				{
					lives--;
 672:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lives>
 676:	81 50       	subi	r24, 0x01	; 1
 678:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lives>
					life=0;
 67c:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <life+0x1>
 680:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <life>
			//}
			//life++;
			
			 
			//draw the obstacles
			if (currentMaze == 1){
 684:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentMaze>
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	09 f0       	breq	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 68c:	00 c1       	rjmp	.+512    	; 0x88e <__stack+0x2f>
				
				if(firstEntranceToMaze){
 68e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 692:	88 23       	and	r24, r24
 694:	09 f4       	brne	.+2      	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 696:	b1 c1       	rjmp	.+866    	; 0x9fa <__stack+0x19b>
					
					firstEntranceToMaze = 0;
 698:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
					obst[0].len =  obst[1].len = obst[3].len =  obst[4].len =  4;
 69c:	8e 86       	std	Y+14, r8	; 0x0e
 69e:	8b 86       	std	Y+11, r8	; 0x0b
 6a0:	8d 82       	std	Y+5, r8	; 0x05
 6a2:	8a 82       	std	Y+2, r8	; 0x02
					obst[5].len =  obst[6].len = obst[7].len =  obst[8].len=obst[9].len= 1;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	8d 8f       	std	Y+29, r24	; 0x1d
 6a8:	8a 8f       	std	Y+26, r24	; 0x1a
 6aa:	8f 8b       	std	Y+23, r24	; 0x17
 6ac:	8c 8b       	std	Y+20, r24	; 0x14
 6ae:	89 8b       	std	Y+17, r24	; 0x11
					obst[2].len = 2;
 6b0:	82 e0       	ldi	r24, 0x02	; 2
 6b2:	88 87       	std	Y+8, r24	; 0x08
					obst[5].y=obst[0].y = 5;
 6b4:	59 82       	std	Y+1, r5	; 0x01
 6b6:	58 8a       	std	Y+16, r5	; 0x10
					obst[6].y=obst[1].y = 10;
 6b8:	9c 82       	std	Y+4, r9	; 0x04
 6ba:	9b 8a       	std	Y+19, r9	; 0x13
					obst[7].x=obst[2].x = 8;
 6bc:	88 e0       	ldi	r24, 0x08	; 8
 6be:	8e 83       	std	Y+6, r24	; 0x06
 6c0:	8d 8b       	std	Y+21, r24	; 0x15
					obst[8].y=obst[3].y = 10;
 6c2:	9a 86       	std	Y+10, r9	; 0x0a
 6c4:	99 8e       	std	Y+25, r9	; 0x19
					obst[9].y=obst[4].y = 4;	
 6c6:	8d 86       	std	Y+13, r8	; 0x0d
 6c8:	8c 8e       	std	Y+28, r8	; 0x1c
				}
					
				switch(c / 100){
 6ca:	98 01       	movw	r18, r16
 6cc:	36 95       	lsr	r19
 6ce:	27 95       	ror	r18
 6d0:	36 95       	lsr	r19
 6d2:	27 95       	ror	r18
 6d4:	ab e7       	ldi	r26, 0x7B	; 123
 6d6:	b4 e1       	ldi	r27, 0x14	; 20
 6d8:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
 6dc:	96 95       	lsr	r25
 6de:	87 95       	ror	r24
 6e0:	82 30       	cpi	r24, 0x02	; 2
 6e2:	91 05       	cpc	r25, r1
 6e4:	f1 f0       	breq	.+60     	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
 6e6:	28 f4       	brcc	.+10     	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6e8:	00 97       	sbiw	r24, 0x00	; 0
 6ea:	51 f0       	breq	.+20     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	89 f0       	breq	.+34     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 6f0:	ab c1       	rjmp	.+854    	; 0xa48 <__stack+0x1e9>
 6f2:	84 30       	cpi	r24, 0x04	; 4
 6f4:	91 05       	cpc	r25, r1
 6f6:	41 f1       	breq	.+80     	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 6f8:	f0 f0       	brcs	.+60     	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 6fa:	05 97       	sbiw	r24, 0x05	; 5
 6fc:	71 f1       	breq	.+92     	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
 6fe:	a4 c1       	rjmp	.+840    	; 0xa48 <__stack+0x1e9>
					case 0:
						 obst[0].x = 1;
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	88 83       	st	Y, r24
						 obst[1].x = 3;
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	8b 83       	std	Y+3, r24	; 0x03
						 obst[2].y = 10;
 708:	9f 82       	std	Y+7, r9	; 0x07
						 obst[3].x = 10;
 70a:	99 86       	std	Y+9, r9	; 0x09
						 obst[4].x = 11;
 70c:	eb e0       	ldi	r30, 0x0B	; 11
 70e:	ec 87       	std	Y+12, r30	; 0x0c
						 
						
						break;
 710:	2b c0       	rjmp	.+86     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
					case 1:
					
						 obst[0].x = 2;
 712:	82 e0       	ldi	r24, 0x02	; 2
 714:	88 83       	st	Y, r24
						 obst[1].x = 2;
 716:	8b 83       	std	Y+3, r24	; 0x03
						 obst[2].y = 11;
 718:	fb e0       	ldi	r31, 0x0B	; 11
 71a:	ff 83       	std	Y+7, r31	; 0x07
						 obst[3].x = 11;
 71c:	f9 87       	std	Y+9, r31	; 0x09
						 obst[4].x = 10;
 71e:	9c 86       	std	Y+12, r9	; 0x0c
						break;
 720:	23 c0       	rjmp	.+70     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
					case 2:
						 obst[0].x = 3;
 722:	83 e0       	ldi	r24, 0x03	; 3
 724:	88 83       	st	Y, r24
						 obst[1].x = 1;
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	8b 83       	std	Y+3, r24	; 0x03
						 obst[2].y = 12;
 72a:	8c e0       	ldi	r24, 0x0C	; 12
 72c:	8f 83       	std	Y+7, r24	; 0x07
						 obst[3].x = 10;
 72e:	99 86       	std	Y+9, r9	; 0x09
						 obst[4].x = 9;
 730:	29 e0       	ldi	r18, 0x09	; 9
 732:	2c 87       	std	Y+12, r18	; 0x0c
						break;
 734:	19 c0       	rjmp	.+50     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
					case 3:
						 obst[0].x = 4;
 736:	88 82       	st	Y, r8
						 obst[1].x = 2;
 738:	82 e0       	ldi	r24, 0x02	; 2
 73a:	8b 83       	std	Y+3, r24	; 0x03
						 obst[2].y = 13;
 73c:	8d e0       	ldi	r24, 0x0D	; 13
 73e:	8f 83       	std	Y+7, r24	; 0x07
						 obst[3].x = 9;
 740:	89 e0       	ldi	r24, 0x09	; 9
 742:	89 87       	std	Y+9, r24	; 0x09
						 obst[4].x = 10;
 744:	9c 86       	std	Y+12, r9	; 0x0c
						break;
 746:	10 c0       	rjmp	.+32     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
					case 4:
						 obst[0].x = 3;
 748:	83 e0       	ldi	r24, 0x03	; 3
 74a:	88 83       	st	Y, r24
						 obst[1].x = 3;
 74c:	8b 83       	std	Y+3, r24	; 0x03
						 obst[2].y = 12;
 74e:	8c e0       	ldi	r24, 0x0C	; 12
 750:	8f 83       	std	Y+7, r24	; 0x07
						 obst[3].x = 10;
 752:	99 86       	std	Y+9, r9	; 0x09
						 obst[4].x = 11;
 754:	eb e0       	ldi	r30, 0x0B	; 11
 756:	ec 87       	std	Y+12, r30	; 0x0c
						break;
 758:	07 c0       	rjmp	.+14     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
					case 5:
						 obst[0].x = 2;
 75a:	82 e0       	ldi	r24, 0x02	; 2
 75c:	88 83       	st	Y, r24
						 obst[1].x = 4;
 75e:	8b 82       	std	Y+3, r8	; 0x03
						 obst[2].y = 11;
 760:	fb e0       	ldi	r31, 0x0B	; 11
 762:	ff 83       	std	Y+7, r31	; 0x07
						 obst[3].x = 11;
 764:	f9 87       	std	Y+9, r31	; 0x09
						 obst[4].x = 10;
 766:	9c 86       	std	Y+12, r9	; 0x0c
						break;
					
					default: c = 0;
				}
				if(c%100==0)
 768:	ef 28       	or	r14, r15
 76a:	09 f0       	breq	.+2      	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 76c:	3f c0       	rjmp	.+126    	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
 76e:	02 c0       	rjmp	.+4      	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
						 obst[2].y = 11;
						 obst[3].x = 11;
						 obst[4].x = 10;
						break;
					
					default: c = 0;
 770:	00 e0       	ldi	r16, 0x00	; 0
 772:	10 e0       	ldi	r17, 0x00	; 0
				}
				if(c%100==0)
				{
					if(obst[5].y==1)
 774:	88 89       	ldd	r24, Y+16	; 0x10
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	39 f4       	brne	.+14     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
					{
						obst[5].y=obst[0].y-1;
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	81 50       	subi	r24, 0x01	; 1
 77e:	88 8b       	std	Y+16, r24	; 0x10
						obst[5].x=obst[0].x+2;
 780:	88 81       	ld	r24, Y
 782:	8e 5f       	subi	r24, 0xFE	; 254
 784:	8f 87       	std	Y+15, r24	; 0x0f
 786:	02 c0       	rjmp	.+4      	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
					}
					else{
						obst[5].y--;
 788:	81 50       	subi	r24, 0x01	; 1
 78a:	88 8b       	std	Y+16, r24	; 0x10
					}
					if(obst[6].y==15)
 78c:	8b 89       	ldd	r24, Y+19	; 0x13
 78e:	8f 30       	cpi	r24, 0x0F	; 15
 790:	39 f4       	brne	.+14     	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
					{
						obst[6].y=obst[1].y+1;
 792:	8c 81       	ldd	r24, Y+4	; 0x04
 794:	8f 5f       	subi	r24, 0xFF	; 255
 796:	8b 8b       	std	Y+19, r24	; 0x13
						obst[6].x=obst[1].x+2;
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	8e 5f       	subi	r24, 0xFE	; 254
 79c:	8a 8b       	std	Y+18, r24	; 0x12
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
					}
					else{
						obst[6].y++;
 7a0:	8f 5f       	subi	r24, 0xFF	; 255
 7a2:	8b 8b       	std	Y+19, r24	; 0x13
					}
					if(obst[7].x==1)
 7a4:	8d 89       	ldd	r24, Y+21	; 0x15
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	39 f4       	brne	.+14     	; 0x7b8 <__LOCK_REGION_LENGTH__+0x3b8>
					{
						obst[7].x=obst[2].x-1;
 7aa:	8e 81       	ldd	r24, Y+6	; 0x06
 7ac:	81 50       	subi	r24, 0x01	; 1
 7ae:	8d 8b       	std	Y+21, r24	; 0x15
						obst[7].y=obst[2].y+2;
 7b0:	8f 81       	ldd	r24, Y+7	; 0x07
 7b2:	8e 5f       	subi	r24, 0xFE	; 254
 7b4:	8e 8b       	std	Y+22, r24	; 0x16
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
					}
					else{
						obst[7].x--;
 7b8:	81 50       	subi	r24, 0x01	; 1
 7ba:	8d 8b       	std	Y+21, r24	; 0x15
					}
					if(obst[8].y==15)
 7bc:	89 8d       	ldd	r24, Y+25	; 0x19
 7be:	8f 30       	cpi	r24, 0x0F	; 15
 7c0:	39 f4       	brne	.+14     	; 0x7d0 <__LOCK_REGION_LENGTH__+0x3d0>
					{
						obst[8].y=obst[3].y+1;
 7c2:	8a 85       	ldd	r24, Y+10	; 0x0a
 7c4:	8f 5f       	subi	r24, 0xFF	; 255
 7c6:	89 8f       	std	Y+25, r24	; 0x19
						obst[8].x=obst[3].x+2;
 7c8:	89 85       	ldd	r24, Y+9	; 0x09
 7ca:	8e 5f       	subi	r24, 0xFE	; 254
 7cc:	88 8f       	std	Y+24, r24	; 0x18
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
					}
					else{
						obst[8].y++;
 7d0:	8f 5f       	subi	r24, 0xFF	; 255
 7d2:	89 8f       	std	Y+25, r24	; 0x19
					}
					if(obst[9].y==1)
 7d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	39 f4       	brne	.+14     	; 0x7e8 <__LOCK_REGION_LENGTH__+0x3e8>
					{
						obst[9].y=obst[4].y-1;
 7da:	8d 85       	ldd	r24, Y+13	; 0x0d
 7dc:	81 50       	subi	r24, 0x01	; 1
 7de:	8c 8f       	std	Y+28, r24	; 0x1c
						obst[9].x=obst[4].x+2;
 7e0:	8c 85       	ldd	r24, Y+12	; 0x0c
 7e2:	8e 5f       	subi	r24, 0xFE	; 254
 7e4:	8b 8f       	std	Y+27, r24	; 0x1b
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <__LOCK_REGION_LENGTH__+0x3ec>
					}
					else{
						obst[9].y--;
 7e8:	81 50       	subi	r24, 0x01	; 1
 7ea:	8c 8f       	std	Y+28, r24	; 0x1c
					}
					
				}
				drawVLine( obst[5].x,  obst[5].y,  obst[5].len,  RED);
 7ec:	68 89       	ldd	r22, Y+16	; 0x10
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	8f 85       	ldd	r24, Y+15	; 0x0f
 7f2:	20 e5       	ldi	r18, 0x50	; 80
 7f4:	49 89       	ldd	r20, Y+17	; 0x11
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
				drawVLine( obst[6].x,  obst[6].y,  obst[5].len,  RED);
 7fc:	6b 89       	ldd	r22, Y+19	; 0x13
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	8a 89       	ldd	r24, Y+18	; 0x12
 802:	20 e5       	ldi	r18, 0x50	; 80
 804:	49 89       	ldd	r20, Y+17	; 0x11
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
				drawVLine( obst[7].x,  obst[7].y,  obst[5].len,  RED);
 80c:	6e 89       	ldd	r22, Y+22	; 0x16
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	8d 89       	ldd	r24, Y+21	; 0x15
 812:	20 e5       	ldi	r18, 0x50	; 80
 814:	49 89       	ldd	r20, Y+17	; 0x11
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
				drawVLine( obst[8].x,  obst[8].y,  obst[5].len,  RED);
 81c:	69 8d       	ldd	r22, Y+25	; 0x19
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	88 8d       	ldd	r24, Y+24	; 0x18
 822:	20 e5       	ldi	r18, 0x50	; 80
 824:	49 89       	ldd	r20, Y+17	; 0x11
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
				drawVLine( obst[9].x,  obst[9].y,  obst[5].len,  RED);
 82c:	6c 8d       	ldd	r22, Y+28	; 0x1c
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	8b 8d       	ldd	r24, Y+27	; 0x1b
 832:	20 e5       	ldi	r18, 0x50	; 80
 834:	49 89       	ldd	r20, Y+17	; 0x11
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
				drawVLine( obst[0].x,  obst[0].y,  obst[0].len,  RED);
 83c:	69 81       	ldd	r22, Y+1	; 0x01
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	88 81       	ld	r24, Y
 842:	20 e5       	ldi	r18, 0x50	; 80
 844:	4a 81       	ldd	r20, Y+2	; 0x02
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
				drawVLine( obst[1].x,  obst[1].y,  obst[1].len,  RED);
 84c:	6c 81       	ldd	r22, Y+4	; 0x04
 84e:	70 e0       	ldi	r23, 0x00	; 0
 850:	8b 81       	ldd	r24, Y+3	; 0x03
 852:	20 e5       	ldi	r18, 0x50	; 80
 854:	4d 81       	ldd	r20, Y+5	; 0x05
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
				drawHLine( obst[2].x,  obst[2].y,  obst[2].len,  RED);
 85c:	6f 81       	ldd	r22, Y+7	; 0x07
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	8e 81       	ldd	r24, Y+6	; 0x06
 862:	20 e5       	ldi	r18, 0x50	; 80
 864:	48 85       	ldd	r20, Y+8	; 0x08
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	0e 94 6e 00 	call	0xdc	; 0xdc <drawHLine>
				drawVLine( obst[3].x,  obst[3].y,  obst[3].len,  RED);
 86c:	6a 85       	ldd	r22, Y+10	; 0x0a
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	89 85       	ldd	r24, Y+9	; 0x09
 872:	20 e5       	ldi	r18, 0x50	; 80
 874:	4b 85       	ldd	r20, Y+11	; 0x0b
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
				drawVLine( obst[4].x,  obst[4].y,  obst[4].len,  RED);
 87c:	6d 85       	ldd	r22, Y+13	; 0x0d
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	8c 85       	ldd	r24, Y+12	; 0x0c
 882:	20 e5       	ldi	r18, 0x50	; 80
 884:	4e 85       	ldd	r20, Y+14	; 0x0e
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
 88c:	e0 cd       	rjmp	.-1088   	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			}
			else if(currentMaze==0)
 88e:	81 11       	cpse	r24, r1
 890:	de cd       	rjmp	.-1092   	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			{
					if(firstEntranceToMaze0){
 892:	44 20       	and	r4, r4
 894:	39 f0       	breq	.+14     	; 0x8a4 <__stack+0x45>
					
					firstEntranceToMaze0 = 0;
					obst[0].len =  obst[1].len = 4;
 896:	8d 82       	std	Y+5, r8	; 0x05
 898:	8a 82       	std	Y+2, r8	; 0x02
					obst[2].len =  5;
 89a:	58 86       	std	Y+8, r5	; 0x08
					obst[2].x=6;
 89c:	86 e0       	ldi	r24, 0x06	; 6
 89e:	8e 83       	std	Y+6, r24	; 0x06
					obst[0].y=5;
 8a0:	59 82       	std	Y+1, r5	; 0x01
					obst[1].y=10;					
 8a2:	9c 82       	std	Y+4, r9	; 0x04
				}
				switch(c / 100){
 8a4:	98 01       	movw	r18, r16
 8a6:	36 95       	lsr	r19
 8a8:	27 95       	ror	r18
 8aa:	36 95       	lsr	r19
 8ac:	27 95       	ror	r18
 8ae:	ab e7       	ldi	r26, 0x7B	; 123
 8b0:	b4 e1       	ldi	r27, 0x14	; 20
 8b2:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
 8b6:	96 95       	lsr	r25
 8b8:	87 95       	ror	r24
 8ba:	87 30       	cpi	r24, 0x07	; 7
 8bc:	91 05       	cpc	r25, r1
 8be:	48 f5       	brcc	.+82     	; 0x912 <__stack+0xb3>
 8c0:	fc 01       	movw	r30, r24
 8c2:	e6 5d       	subi	r30, 0xD6	; 214
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__tablejump2__>
					case 0:
						 
						 obst[0].x = 10;
 8ca:	98 82       	st	Y, r9
						 obst[1].x = 11;
 8cc:	2b e0       	ldi	r18, 0x0B	; 11
 8ce:	2b 83       	std	Y+3, r18	; 0x03
						 obst[2].y = 7;
 8d0:	87 e0       	ldi	r24, 0x07	; 7
 8d2:	8f 83       	std	Y+7, r24	; 0x07
						 
						
						break;
 8d4:	20 c0       	rjmp	.+64     	; 0x916 <__stack+0xb7>
					case 1:
					
						 
						 obst[0].x = 11;
 8d6:	eb e0       	ldi	r30, 0x0B	; 11
 8d8:	e8 83       	st	Y, r30
						 obst[1].x = 10;
 8da:	9b 82       	std	Y+3, r9	; 0x03
						 obst[2].y = 8;
 8dc:	f8 e0       	ldi	r31, 0x08	; 8
 8de:	ff 83       	std	Y+7, r31	; 0x07
						break;
 8e0:	1a c0       	rjmp	.+52     	; 0x916 <__stack+0xb7>
					case 2:
						 
						 obst[0].x = 10;
 8e2:	98 82       	st	Y, r9
						 obst[1].x = 9;
 8e4:	29 e0       	ldi	r18, 0x09	; 9
 8e6:	2b 83       	std	Y+3, r18	; 0x03
						 obst[2].y = 9;
 8e8:	2f 83       	std	Y+7, r18	; 0x07
						break;
 8ea:	15 c0       	rjmp	.+42     	; 0x916 <__stack+0xb7>
					case 3:
						 
						 obst[0].x = 9;
 8ec:	89 e0       	ldi	r24, 0x09	; 9
 8ee:	88 83       	st	Y, r24
						 obst[1].x = 8;
 8f0:	e8 e0       	ldi	r30, 0x08	; 8
 8f2:	eb 83       	std	Y+3, r30	; 0x03
						 obst[2].y = 10;
 8f4:	9f 82       	std	Y+7, r9	; 0x07
						break;
 8f6:	0f c0       	rjmp	.+30     	; 0x916 <__stack+0xb7>
					case 4:

						 obst[0].x = 8;
 8f8:	f8 e0       	ldi	r31, 0x08	; 8
 8fa:	f8 83       	st	Y, r31
						 obst[1].x = 9;
 8fc:	29 e0       	ldi	r18, 0x09	; 9
 8fe:	2b 83       	std	Y+3, r18	; 0x03
						 obst[2].y = 11;
 900:	8b e0       	ldi	r24, 0x0B	; 11
 902:	8f 83       	std	Y+7, r24	; 0x07
						break;
 904:	08 c0       	rjmp	.+16     	; 0x916 <__stack+0xb7>
						 obst[0].x = 7;
						 obst[1].x = 11;
						 obst[2].y = 10;
					case 6:
						 
						 obst[0].x = 8;
 906:	e8 e0       	ldi	r30, 0x08	; 8
 908:	e8 83       	st	Y, r30
						 obst[1].x = 10;
 90a:	9b 82       	std	Y+3, r9	; 0x03
						 obst[2].y = 9;
 90c:	f9 e0       	ldi	r31, 0x09	; 9
 90e:	ff 83       	std	Y+7, r31	; 0x07

						break;
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0xb7>
					
					default: c = 0;
 912:	00 e0       	ldi	r16, 0x00	; 0
 914:	10 e0       	ldi	r17, 0x00	; 0
				}
				drawVLine( obst[0].x,  obst[0].y,  obst[0].len,  RED);
 916:	69 81       	ldd	r22, Y+1	; 0x01
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	88 81       	ld	r24, Y
 91c:	20 e5       	ldi	r18, 0x50	; 80
 91e:	4a 81       	ldd	r20, Y+2	; 0x02
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
				drawVLine( obst[1].x,  obst[1].y,  obst[1].len,  RED);
 926:	6c 81       	ldd	r22, Y+4	; 0x04
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	8b 81       	ldd	r24, Y+3	; 0x03
 92c:	20 e5       	ldi	r18, 0x50	; 80
 92e:	4d 81       	ldd	r20, Y+5	; 0x05
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 50 00 	call	0xa0	; 0xa0 <drawVLine>
				drawHLine( obst[2].x,  obst[2].y,  obst[2].len,  RED);
 936:	6f 81       	ldd	r22, Y+7	; 0x07
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	8e 81       	ldd	r24, Y+6	; 0x06
 93c:	20 e5       	ldi	r18, 0x50	; 80
 93e:	48 85       	ldd	r20, Y+8	; 0x08
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 6e 00 	call	0xdc	; 0xdc <drawHLine>
 946:	41 2c       	mov	r4, r1
 948:	82 cd       	rjmp	.-1276   	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			}
			
		}
		else if(currentScreen == GAME_OVER){
 94a:	8a 30       	cpi	r24, 0x0A	; 10
 94c:	09 f0       	breq	.+2      	; 0x950 <__stack+0xf1>
 94e:	7f cd       	rjmp	.-1282   	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			switch(c / 200){
 950:	98 01       	movw	r18, r16
 952:	36 95       	lsr	r19
 954:	27 95       	ror	r18
 956:	36 95       	lsr	r19
 958:	27 95       	ror	r18
 95a:	36 95       	lsr	r19
 95c:	27 95       	ror	r18
 95e:	ab e7       	ldi	r26, 0x7B	; 123
 960:	b4 e1       	ldi	r27, 0x14	; 20
 962:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
 966:	96 95       	lsr	r25
 968:	87 95       	ror	r24
 96a:	00 97       	sbiw	r24, 0x00	; 0
 96c:	19 f0       	breq	.+6      	; 0x974 <__stack+0x115>
 96e:	01 97       	sbiw	r24, 0x01	; 1
 970:	39 f0       	breq	.+14     	; 0x980 <__stack+0x121>
 972:	0c c0       	rjmp	.+24     	; 0x98c <__stack+0x12d>
				case 0: 
					draw(game_over, RED);
 974:	60 e5       	ldi	r22, 0x50	; 80
 976:	85 e0       	ldi	r24, 0x05	; 5
 978:	91 e0       	ldi	r25, 0x01	; 1
 97a:	0e 94 b1 00 	call	0x162	; 0x162 <draw>
					break;
 97e:	08 c0       	rjmp	.+16     	; 0x990 <__stack+0x131>
				case 1:
					draw(game_over, GREEN);
 980:	60 e6       	ldi	r22, 0x60	; 96
 982:	85 e0       	ldi	r24, 0x05	; 5
 984:	91 e0       	ldi	r25, 0x01	; 1
 986:	0e 94 b1 00 	call	0x162	; 0x162 <draw>
					break;
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x131>
				
				default:
					c = 0;
 98c:	00 e0       	ldi	r16, 0x00	; 0
 98e:	10 e0       	ldi	r17, 0x00	; 0
			}
			point = 0;
 990:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__data_end+0x1>
 994:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
			calPoint(dotR,dotC);
 998:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <dotC>
 99c:	70 e0       	ldi	r23, 0x00	; 0
 99e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <dotR>
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 c7 00 	call	0x18e	; 0x18e <calPoint>
			
			drawDigit((point / 10), 0);
 9a8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 9ac:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 9b0:	6a e0       	ldi	r22, 0x0A	; 10
 9b2:	70 e0       	ldi	r23, 0x00	; 0
 9b4:	0e 94 28 05 	call	0xa50	; 0xa50 <__divmodhi4>
 9b8:	86 2f       	mov	r24, r22
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	70 e0       	ldi	r23, 0x00	; 0
 9be:	0e 94 8e 00 	call	0x11c	; 0x11c <drawDigit>
			//drawDigit(8, 0);
			//drawDigit(9, 1);
			drawDigit(point % 10, 1);
 9c2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 9c6:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 9ca:	6a e0       	ldi	r22, 0x0A	; 10
 9cc:	70 e0       	ldi	r23, 0x00	; 0
 9ce:	0e 94 28 05 	call	0xa50	; 0xa50 <__divmodhi4>
 9d2:	61 e0       	ldi	r22, 0x01	; 1
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	0e 94 8e 00 	call	0x11c	; 0x11c <drawDigit>
 9da:	39 cd       	rjmp	.-1422   	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		{
			currentMaze=0;
			dotR=1;
			dotC=0;
		}
		if(((dotR==14)||(dotR==13))&&(dotC==0)&&(currentMaze==0))
 9dc:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <dotR>
 9e0:	58 cd       	rjmp	.-1360   	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
				flag[0]=1;
				loop=0;
			}
			if(!( t & ((1 << PC0)) )){
				
				flag[0]=0;
 9e2:	f5 01       	movw	r30, r10
 9e4:	10 82       	st	Z, r1
 9e6:	84 cd       	rjmp	.-1272   	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
				//_delay_ms(150);
				loop=0;
			}
			if(!( t & ((1 << PC1)) )){
				
				flag[1]=0;
 9e8:	f5 01       	movw	r30, r10
 9ea:	11 82       	std	Z+1, r1	; 0x01
 9ec:	a8 cd       	rjmp	.-1200   	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				//_delay_ms(150);
				loop=0;
			}
			if(!( t & ((1 << PC6)) )){
				
				flag[2]=0;
 9ee:	f5 01       	movw	r30, r10
 9f0:	12 82       	std	Z+2, r1	; 0x02
 9f2:	cd cd       	rjmp	.-1126   	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
				//_delay_ms(150);
				loop=0;
			}
			if(!( t & ((1 << PC7)) )){
				
				flag[3]=0;
 9f4:	f5 01       	movw	r30, r10
 9f6:	13 82       	std	Z+3, r1	; 0x03
 9f8:	f3 cd       	rjmp	.-1050   	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
					obst[7].x=obst[2].x = 8;
					obst[8].y=obst[3].y = 10;
					obst[9].y=obst[4].y = 4;	
				}
					
				switch(c / 100){
 9fa:	98 01       	movw	r18, r16
 9fc:	36 95       	lsr	r19
 9fe:	27 95       	ror	r18
 a00:	36 95       	lsr	r19
 a02:	27 95       	ror	r18
 a04:	ab e7       	ldi	r26, 0x7B	; 123
 a06:	b4 e1       	ldi	r27, 0x14	; 20
 a08:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
 a0c:	96 95       	lsr	r25
 a0e:	87 95       	ror	r24
 a10:	82 30       	cpi	r24, 0x02	; 2
 a12:	91 05       	cpc	r25, r1
 a14:	09 f4       	brne	.+2      	; 0xa18 <__stack+0x1b9>
 a16:	85 ce       	rjmp	.-758    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
 a18:	38 f4       	brcc	.+14     	; 0xa28 <__stack+0x1c9>
 a1a:	00 97       	sbiw	r24, 0x00	; 0
 a1c:	09 f4       	brne	.+2      	; 0xa20 <__stack+0x1c1>
 a1e:	70 ce       	rjmp	.-800    	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 a20:	01 97       	sbiw	r24, 0x01	; 1
 a22:	09 f4       	brne	.+2      	; 0xa26 <__stack+0x1c7>
 a24:	76 ce       	rjmp	.-788    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
 a26:	a4 ce       	rjmp	.-696    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
 a28:	84 30       	cpi	r24, 0x04	; 4
 a2a:	91 05       	cpc	r25, r1
 a2c:	09 f4       	brne	.+2      	; 0xa30 <__stack+0x1d1>
 a2e:	8c ce       	rjmp	.-744    	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
 a30:	08 f4       	brcc	.+2      	; 0xa34 <__stack+0x1d5>
 a32:	81 ce       	rjmp	.-766    	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 a34:	05 97       	sbiw	r24, 0x05	; 5
 a36:	09 f4       	brne	.+2      	; 0xa3a <__stack+0x1db>
 a38:	90 ce       	rjmp	.-736    	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
 a3a:	9a ce       	rjmp	.-716    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
		{
			currentMaze=0;
			dotR=1;
			dotC=0;
		}
		if(((dotR==14)||(dotR==13))&&(dotC==0)&&(currentMaze==0))
 a3c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentMaze>
 a40:	88 23       	and	r24, r24
 a42:	09 f4       	brne	.+2      	; 0xa46 <__stack+0x1e7>
 a44:	23 cd       	rjmp	.-1466   	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 a46:	25 cd       	rjmp	.-1462   	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
					
					default: c = 0;
				}
				if(c%100==0)
				{
					if(obst[5].y==1)
 a48:	88 89       	ldd	r24, Y+16	; 0x10
						 obst[2].y = 11;
						 obst[3].x = 11;
						 obst[4].x = 10;
						break;
					
					default: c = 0;
 a4a:	00 e0       	ldi	r16, 0x00	; 0
 a4c:	10 e0       	ldi	r17, 0x00	; 0
 a4e:	9c ce       	rjmp	.-712    	; 0x788 <__LOCK_REGION_LENGTH__+0x388>

00000a50 <__divmodhi4>:
 a50:	97 fb       	bst	r25, 7
 a52:	07 2e       	mov	r0, r23
 a54:	16 f4       	brtc	.+4      	; 0xa5a <__divmodhi4+0xa>
 a56:	00 94       	com	r0
 a58:	07 d0       	rcall	.+14     	; 0xa68 <__divmodhi4_neg1>
 a5a:	77 fd       	sbrc	r23, 7
 a5c:	09 d0       	rcall	.+18     	; 0xa70 <__divmodhi4_neg2>
 a5e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__udivmodhi4>
 a62:	07 fc       	sbrc	r0, 7
 a64:	05 d0       	rcall	.+10     	; 0xa70 <__divmodhi4_neg2>
 a66:	3e f4       	brtc	.+14     	; 0xa76 <__divmodhi4_exit>

00000a68 <__divmodhi4_neg1>:
 a68:	90 95       	com	r25
 a6a:	81 95       	neg	r24
 a6c:	9f 4f       	sbci	r25, 0xFF	; 255
 a6e:	08 95       	ret

00000a70 <__divmodhi4_neg2>:
 a70:	70 95       	com	r23
 a72:	61 95       	neg	r22
 a74:	7f 4f       	sbci	r23, 0xFF	; 255

00000a76 <__divmodhi4_exit>:
 a76:	08 95       	ret

00000a78 <__tablejump2__>:
 a78:	ee 0f       	add	r30, r30
 a7a:	ff 1f       	adc	r31, r31
 a7c:	05 90       	lpm	r0, Z+
 a7e:	f4 91       	lpm	r31, Z
 a80:	e0 2d       	mov	r30, r0
 a82:	09 94       	ijmp

00000a84 <__umulhisi3>:
 a84:	a2 9f       	mul	r26, r18
 a86:	b0 01       	movw	r22, r0
 a88:	b3 9f       	mul	r27, r19
 a8a:	c0 01       	movw	r24, r0
 a8c:	a3 9f       	mul	r26, r19
 a8e:	70 0d       	add	r23, r0
 a90:	81 1d       	adc	r24, r1
 a92:	11 24       	eor	r1, r1
 a94:	91 1d       	adc	r25, r1
 a96:	b2 9f       	mul	r27, r18
 a98:	70 0d       	add	r23, r0
 a9a:	81 1d       	adc	r24, r1
 a9c:	11 24       	eor	r1, r1
 a9e:	91 1d       	adc	r25, r1
 aa0:	08 95       	ret

00000aa2 <__udivmodhi4>:
 aa2:	aa 1b       	sub	r26, r26
 aa4:	bb 1b       	sub	r27, r27
 aa6:	51 e1       	ldi	r21, 0x11	; 17
 aa8:	07 c0       	rjmp	.+14     	; 0xab8 <__udivmodhi4_ep>

00000aaa <__udivmodhi4_loop>:
 aaa:	aa 1f       	adc	r26, r26
 aac:	bb 1f       	adc	r27, r27
 aae:	a6 17       	cp	r26, r22
 ab0:	b7 07       	cpc	r27, r23
 ab2:	10 f0       	brcs	.+4      	; 0xab8 <__udivmodhi4_ep>
 ab4:	a6 1b       	sub	r26, r22
 ab6:	b7 0b       	sbc	r27, r23

00000ab8 <__udivmodhi4_ep>:
 ab8:	88 1f       	adc	r24, r24
 aba:	99 1f       	adc	r25, r25
 abc:	5a 95       	dec	r21
 abe:	a9 f7       	brne	.-22     	; 0xaaa <__udivmodhi4_loop>
 ac0:	80 95       	com	r24
 ac2:	90 95       	com	r25
 ac4:	bc 01       	movw	r22, r24
 ac6:	cd 01       	movw	r24, r26
 ac8:	08 95       	ret

00000aca <_exit>:
 aca:	f8 94       	cli

00000acc <__stop_program>:
 acc:	ff cf       	rjmp	.-2      	; 0xacc <__stop_program>
